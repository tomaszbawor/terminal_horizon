name: Rust RPG Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses-dev
      
      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            artifact: rust_rpg
            asset_name: rust_rpg-linux-x86_64.tar.gz
          - os: macos-latest
            name: macos
            artifact: rust_rpg
            asset_name: rust_rpg-macos-x86_64.tar.gz
          - os: windows-latest
            name: windows
            artifact: rust_rpg.exe
            asset_name: rust_rpg-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libncurses-dev

      - name: Build release
        run: cargo build --release

      - name: Create archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/release/${{ matrix.artifact }} dist/
          cp README.md dist/ || touch dist/README.md
          cd dist
          tar czf ../${{ matrix.asset_name }} *

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist
          cp target/release/${{ matrix.artifact }} dist/
          cp README.md dist/ || echo. > dist/README.md
          cd dist
          7z a ../${{ matrix.asset_name }} *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}-build
          path: ${{ matrix.asset_name }}
          retention-days: 1

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v3

      - name: Prepare release assets
        run: |
          find . -name "*.zip" -o -name "*.tar.gz" -exec mv {} . \;
          ls -la *.zip *.tar.gz

      - name: Generate release notes
        run: |
          echo "# Rust RPG v${{ steps.get_version.outputs.VERSION }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes in this release:" >> RELEASE_NOTES.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          body_path: RELEASE_NOTES.md
          files: |
            rust_rpg-linux-x86_64.tar.gz
            rust_rpg-macos-x86_64.tar.gz
            rust_rpg-windows-x86_64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
